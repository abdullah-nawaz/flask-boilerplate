# Generated by Snowball 2.0.0 - https://snowballstem.org/

from .basestemmer import BaseStemmer
from .among import Among


class IrishStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.0.0 - https://snowballstem.org/
    """

    a_0 = [
        Among("b'", -1, 1),
        Among("bh", -1, 4),
        Among("bhf", 1, 2),
        Among("bp", -1, 8),
        Among("ch", -1, 5),
        Among("d'", -1, 1),
        Among("d'fh", 5, 2),
        Among("dh", -1, 6),
        Among("dt", -1, 9),
        Among("fh", -1, 2),
        Among("gc", -1, 5),
        Among("gh", -1, 7),
        Among("h-", -1, 1),
        Among("m'", -1, 1),
        Among("mb", -1, 4),
        Among("mh", -1, 10),
        Among("n-", -1, 1),
        Among("nd", -1, 6),
        Among("ng", -1, 7),
        Among("ph", -1, 8),
        Among("sh", -1, 3),
        Among("t-", -1, 1),
        Among("th", -1, 9),
        Among("ts", -1, 3),
    ]

    a_1 = [
        Among("\u00EDochta", -1, 1),
        Among("a\u00EDochta", 0, 1),
        Among("ire", -1, 2),
        Among("aire", 2, 2),
        Among("abh", -1, 1),
        Among("eabh", 4, 1),
        Among("ibh", -1, 1),
        Among("aibh", 6, 1),
        Among("amh", -1, 1),
        Among("eamh", 8, 1),
        Among("imh", -1, 1),
        Among("aimh", 10, 1),
        Among("\u00EDocht", -1, 1),
        Among("a\u00EDocht", 12, 1),
        Among("ir\u00ED", -1, 2),
        Among("air\u00ED", 14, 2),
    ]

    a_2 = [
        Among("\u00F3ideacha", -1, 6),
        Among("patacha", -1, 5),
        Among("achta", -1, 1),
        Among("arcachta", 2, 2),
        Among("eachta", 2, 1),
        Among("grafa\u00EDochta", -1, 4),
        Among("paite", -1, 5),
        Among("ach", -1, 1),
        Among("each", 7, 1),
        Among("\u00F3ideach", 8, 6),
        Among("gineach", 8, 3),
        Among("patach", 7, 5),
        Among("grafa\u00EDoch", -1, 4),
        Among("pataigh", -1, 5),
        Among("\u00F3idigh", -1, 6),
        Among("acht\u00FAil", -1, 1),
        Among("eacht\u00FAil", 15, 1),
        Among("gineas", -1, 3),
        Among("ginis", -1, 3),
        Among("acht", -1, 1),
        Among("arcacht", 19, 2),
        Among("eacht", 19, 1),
        Among("grafa\u00EDocht", -1, 4),
        Among("arcachta\u00ED", -1, 2),
        Among("grafa\u00EDochta\u00ED", -1, 4),
    ]

    a_3 = [
        Among("imid", -1, 1),
        Among("aimid", 0, 1),
        Among("\u00EDmid", -1, 1),
        Among("a\u00EDmid", 2, 1),
        Among("adh", -1, 2),
        Among("eadh", 4, 2),
        Among("faidh", -1, 1),
        Among("fidh", -1, 1),
        Among("\u00E1il", -1, 2),
        Among("ain", -1, 2),
        Among("tear", -1, 2),
        Among("tar", -1, 2),
    ]

    g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 2]

    I_p2 = 0
    I_p1 = 0
    I_pV = 0

    def __r_mark_regions(self):
        # (, line 28
        self.I_pV = self.limit
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        # do, line 34
        v_1 = self.cursor
        try:
            # (, line 34
            # gopast grouping v, line 35
            if not self.go_out_grouping(IrishStemmer.g_v, 97, 250):
                raise lab0()
            self.cursor += 1
            # setmark pV, line 35
            self.I_pV = self.cursor
        except lab0:
            pass
        self.cursor = v_1
        # do, line 37
        v_2 = self.cursor
        try:
            # (, line 37
            # gopast grouping v, line 38
            if not self.go_out_grouping(IrishStemmer.g_v, 97, 250):
                raise lab1()
            self.cursor += 1
            # gopast non v, line 38
            if not self.go_in_grouping(IrishStemmer.g_v, 97, 250):
                raise lab1()
            self.cursor += 1
            # setmark p1, line 38
            self.I_p1 = self.cursor
            # gopast grouping v, line 39
            if not self.go_out_grouping(IrishStemmer.g_v, 97, 250):
                raise lab1()
            self.cursor += 1
            # gopast non v, line 39
            if not self.go_in_grouping(IrishStemmer.g_v, 97, 250):
                raise lab1()
            self.cursor += 1
            # setmark p2, line 39
            self.I_p2 = self.cursor
        except lab1:
            pass
        self.cursor = v_2
        return True

    def __r_initial_morph(self):
        # (, line 43
        # [, line 44
        self.bra = self.cursor
        # substring, line 44
        among_var = self.find_among(IrishStemmer.a_0)
        if among_var == 0:
            return False
        # ], line 44
        self.ket = self.cursor
        if among_var == 1:
            # (, line 46
            # delete, line 46
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 52
            # <-, line 52
            if not self.slice_from("f"):
                return False
        elif among_var == 3:
            # (, line 58
            # <-, line 58
            if not self.slice_from("s"):
                return False
        elif among_var == 4:
            # (, line 61
            # <-, line 61
            if not self.slice_from("b"):
                return False
        elif among_var == 5:
            # (, line 63
            # <-, line 63
            if not self.slice_from("c"):
                return False
        elif among_var == 6:
            # (, line 65
            # <-, line 65
            if not self.slice_from("d"):
                return False
        elif among_var == 7:
            # (, line 69
            # <-, line 69
            if not self.slice_from("g"):
                return False
        elif among_var == 8:
            # (, line 71
            # <-, line 71
            if not self.slice_from("p"):
                return False
        elif among_var == 9:
            # (, line 75
            # <-, line 75
            if not self.slice_from("t"):
                return False
        elif among_var == 10:
            # (, line 89
            # <-, line 89
            if not self.slice_from("m"):
                return False
        return True

    def __r_RV(self):
        if not self.I_pV <= self.cursor:
            return False
        return True

    def __r_R1(self):
        if not self.I_p1 <= self.cursor:
            return False
        return True

    def __r_R2(self):
        if not self.I_p2 <= self.cursor:
            return False
        return True

    def __r_noun_sfx(self):
        # (, line 103
        # [, line 104
        self.ket = self.cursor
        # substring, line 104
        among_var = self.find_among_b(IrishStemmer.a_1)
        if among_var == 0:
            return False
        # ], line 104
        self.bra = self.cursor
        if among_var == 1:
            # (, line 108
            # call R1, line 108
            if not self.__r_R1():
                return False
            # delete, line 108
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 110
            # call R2, line 110
            if not self.__r_R2():
                return False
            # delete, line 110
            if not self.slice_del():
                return False

        return True

    def __r_deriv(self):
        # (, line 113
        # [, line 114
        self.ket = self.cursor
        # substring, line 114
        among_var = self.find_among_b(IrishStemmer.a_2)
        if among_var == 0:
            return False
        # ], line 114
        self.bra = self.cursor
        if among_var == 1:
            # (, line 116
            # call R2, line 116
            if not self.__r_R2():
                return False
            # delete, line 116
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 118
            # <-, line 118
            if not self.slice_from("arc"):
                return False
        elif among_var == 3:
            # (, line 120
            # <-, line 120
            if not self.slice_from("gin"):
                return False
        elif among_var == 4:
            # (, line 122
            # <-, line 122
            if not self.slice_from("graf"):
                return False
        elif among_var == 5:
            # (, line 124
            # <-, line 124
            if not self.slice_from("paite"):
                return False
        elif among_var == 6:
            # (, line 126
            # <-, line 126
            if not self.slice_from("\u00F3id"):
                return False
        return True

    def __r_verb_sfx(self):
        # (, line 129
        # [, line 130
        self.ket = self.cursor
        # substring, line 130
        among_var = self.find_among_b(IrishStemmer.a_3)
        if among_var == 0:
            return False
        # ], line 130
        self.bra = self.cursor
        if among_var == 1:
            # (, line 133
            # call RV, line 133
            if not self.__r_RV():
                return False
            # delete, line 133
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 138
            # call R1, line 138
            if not self.__r_R1():
                return False
            # delete, line 138
            if not self.slice_del():
                return False

        return True

    def _stem(self):
        # (, line 143
        # do, line 144
        v_1 = self.cursor
        # call initial_morph, line 144
        self.__r_initial_morph()
        self.cursor = v_1
        # do, line 145
        # call mark_regions, line 145
        self.__r_mark_regions()
        # backwards, line 146
        self.limit_backward = self.cursor
        self.cursor = self.limit
        # (, line 146
        # do, line 147
        v_3 = self.limit - self.cursor
        # call noun_sfx, line 147
        self.__r_noun_sfx()
        self.cursor = self.limit - v_3
        # do, line 148
        v_4 = self.limit - self.cursor
        # call deriv, line 148
        self.__r_deriv()
        self.cursor = self.limit - v_4
        # do, line 149
        v_5 = self.limit - self.cursor
        # call verb_sfx, line 149
        self.__r_verb_sfx()
        self.cursor = self.limit - v_5
        self.cursor = self.limit_backward
        return True


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass
