# Generated by Snowball 2.0.0 - https://snowballstem.org/

from .basestemmer import BaseStemmer
from .among import Among


class SpanishStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.0.0 - https://snowballstem.org/
    """

    a_0 = [
        Among("", -1, 6),
        Among("\u00E1", 0, 1),
        Among("\u00E9", 0, 2),
        Among("\u00ED", 0, 3),
        Among("\u00F3", 0, 4),
        Among("\u00FA", 0, 5),
    ]

    a_1 = [
        Among("la", -1, -1),
        Among("sela", 0, -1),
        Among("le", -1, -1),
        Among("me", -1, -1),
        Among("se", -1, -1),
        Among("lo", -1, -1),
        Among("selo", 5, -1),
        Among("las", -1, -1),
        Among("selas", 7, -1),
        Among("les", -1, -1),
        Among("los", -1, -1),
        Among("selos", 10, -1),
        Among("nos", -1, -1),
    ]

    a_2 = [
        Among("ando", -1, 6),
        Among("iendo", -1, 6),
        Among("yendo", -1, 7),
        Among("\u00E1ndo", -1, 2),
        Among("i\u00E9ndo", -1, 1),
        Among("ar", -1, 6),
        Among("er", -1, 6),
        Among("ir", -1, 6),
        Among("\u00E1r", -1, 3),
        Among("\u00E9r", -1, 4),
        Among("\u00EDr", -1, 5),
    ]

    a_3 = [
        Among("ic", -1, -1),
        Among("ad", -1, -1),
        Among("os", -1, -1),
        Among("iv", -1, 1),
    ]

    a_4 = [Among("able", -1, 1), Among("ible", -1, 1), Among("ante", -1, 1)]

    a_5 = [Among("ic", -1, 1), Among("abil", -1, 1), Among("iv", -1, 1)]

    a_6 = [
        Among("ica", -1, 1),
        Among("ancia", -1, 2),
        Among("encia", -1, 5),
        Among("adora", -1, 2),
        Among("osa", -1, 1),
        Among("ista", -1, 1),
        Among("iva", -1, 9),
        Among("anza", -1, 1),
        Among("log\u00EDa", -1, 3),
        Among("idad", -1, 8),
        Among("able", -1, 1),
        Among("ible", -1, 1),
        Among("ante", -1, 2),
        Among("mente", -1, 7),
        Among("amente", 13, 6),
        Among("aci\u00F3n", -1, 2),
        Among("uci\u00F3n", -1, 4),
        Among("ico", -1, 1),
        Among("ismo", -1, 1),
        Among("oso", -1, 1),
        Among("amiento", -1, 1),
        Among("imiento", -1, 1),
        Among("ivo", -1, 9),
        Among("ador", -1, 2),
        Among("icas", -1, 1),
        Among("ancias", -1, 2),
        Among("encias", -1, 5),
        Among("adoras", -1, 2),
        Among("osas", -1, 1),
        Among("istas", -1, 1),
        Among("ivas", -1, 9),
        Among("anzas", -1, 1),
        Among("log\u00EDas", -1, 3),
        Among("idades", -1, 8),
        Among("ables", -1, 1),
        Among("ibles", -1, 1),
        Among("aciones", -1, 2),
        Among("uciones", -1, 4),
        Among("adores", -1, 2),
        Among("antes", -1, 2),
        Among("icos", -1, 1),
        Among("ismos", -1, 1),
        Among("osos", -1, 1),
        Among("amientos", -1, 1),
        Among("imientos", -1, 1),
        Among("ivos", -1, 9),
    ]

    a_7 = [
        Among("ya", -1, 1),
        Among("ye", -1, 1),
        Among("yan", -1, 1),
        Among("yen", -1, 1),
        Among("yeron", -1, 1),
        Among("yendo", -1, 1),
        Among("yo", -1, 1),
        Among("yas", -1, 1),
        Among("yes", -1, 1),
        Among("yais", -1, 1),
        Among("yamos", -1, 1),
        Among("y\u00F3", -1, 1),
    ]

    a_8 = [
        Among("aba", -1, 2),
        Among("ada", -1, 2),
        Among("ida", -1, 2),
        Among("ara", -1, 2),
        Among("iera", -1, 2),
        Among("\u00EDa", -1, 2),
        Among("ar\u00EDa", 5, 2),
        Among("er\u00EDa", 5, 2),
        Among("ir\u00EDa", 5, 2),
        Among("ad", -1, 2),
        Among("ed", -1, 2),
        Among("id", -1, 2),
        Among("ase", -1, 2),
        Among("iese", -1, 2),
        Among("aste", -1, 2),
        Among("iste", -1, 2),
        Among("an", -1, 2),
        Among("aban", 16, 2),
        Among("aran", 16, 2),
        Among("ieran", 16, 2),
        Among("\u00EDan", 16, 2),
        Among("ar\u00EDan", 20, 2),
        Among("er\u00EDan", 20, 2),
        Among("ir\u00EDan", 20, 2),
        Among("en", -1, 1),
        Among("asen", 24, 2),
        Among("iesen", 24, 2),
        Among("aron", -1, 2),
        Among("ieron", -1, 2),
        Among("ar\u00E1n", -1, 2),
        Among("er\u00E1n", -1, 2),
        Among("ir\u00E1n", -1, 2),
        Among("ado", -1, 2),
        Among("ido", -1, 2),
        Among("ando", -1, 2),
        Among("iendo", -1, 2),
        Among("ar", -1, 2),
        Among("er", -1, 2),
        Among("ir", -1, 2),
        Among("as", -1, 2),
        Among("abas", 39, 2),
        Among("adas", 39, 2),
        Among("idas", 39, 2),
        Among("aras", 39, 2),
        Among("ieras", 39, 2),
        Among("\u00EDas", 39, 2),
        Among("ar\u00EDas", 45, 2),
        Among("er\u00EDas", 45, 2),
        Among("ir\u00EDas", 45, 2),
        Among("es", -1, 1),
        Among("ases", 49, 2),
        Among("ieses", 49, 2),
        Among("abais", -1, 2),
        Among("arais", -1, 2),
        Among("ierais", -1, 2),
        Among("\u00EDais", -1, 2),
        Among("ar\u00EDais", 55, 2),
        Among("er\u00EDais", 55, 2),
        Among("ir\u00EDais", 55, 2),
        Among("aseis", -1, 2),
        Among("ieseis", -1, 2),
        Among("asteis", -1, 2),
        Among("isteis", -1, 2),
        Among("\u00E1is", -1, 2),
        Among("\u00E9is", -1, 1),
        Among("ar\u00E9is", 64, 2),
        Among("er\u00E9is", 64, 2),
        Among("ir\u00E9is", 64, 2),
        Among("ados", -1, 2),
        Among("idos", -1, 2),
        Among("amos", -1, 2),
        Among("\u00E1bamos", 70, 2),
        Among("\u00E1ramos", 70, 2),
        Among("i\u00E9ramos", 70, 2),
        Among("\u00EDamos", 70, 2),
        Among("ar\u00EDamos", 74, 2),
        Among("er\u00EDamos", 74, 2),
        Among("ir\u00EDamos", 74, 2),
        Among("emos", -1, 1),
        Among("aremos", 78, 2),
        Among("eremos", 78, 2),
        Among("iremos", 78, 2),
        Among("\u00E1semos", 78, 2),
        Among("i\u00E9semos", 78, 2),
        Among("imos", -1, 2),
        Among("ar\u00E1s", -1, 2),
        Among("er\u00E1s", -1, 2),
        Among("ir\u00E1s", -1, 2),
        Among("\u00EDs", -1, 2),
        Among("ar\u00E1", -1, 2),
        Among("er\u00E1", -1, 2),
        Among("ir\u00E1", -1, 2),
        Among("ar\u00E9", -1, 2),
        Among("er\u00E9", -1, 2),
        Among("ir\u00E9", -1, 2),
        Among("i\u00F3", -1, 2),
    ]

    a_9 = [
        Among("a", -1, 1),
        Among("e", -1, 2),
        Among("o", -1, 1),
        Among("os", -1, 1),
        Among("\u00E1", -1, 1),
        Among("\u00E9", -1, 2),
        Among("\u00ED", -1, 1),
        Among("\u00F3", -1, 1),
    ]

    g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 10]

    I_p2 = 0
    I_p1 = 0
    I_pV = 0

    def __r_mark_regions(self):
        # (, line 31
        self.I_pV = self.limit
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        # do, line 37
        v_1 = self.cursor
        try:
            # (, line 37
            # or, line 39
            try:
                v_2 = self.cursor
                try:
                    # (, line 38
                    if not self.in_grouping(SpanishStemmer.g_v, 97, 252):
                        raise lab2()
                    # or, line 38
                    try:
                        v_3 = self.cursor
                        try:
                            # (, line 38
                            if not self.out_grouping(SpanishStemmer.g_v, 97, 252):
                                raise lab4()
                            # gopast grouping v, line 38
                            if not self.go_out_grouping(SpanishStemmer.g_v, 97, 252):
                                raise lab4()
                            self.cursor += 1
                            raise lab3()
                        except lab4:
                            pass
                        self.cursor = v_3
                        # (, line 38
                        if not self.in_grouping(SpanishStemmer.g_v, 97, 252):
                            raise lab2()
                        # gopast non v, line 38
                        if not self.go_in_grouping(SpanishStemmer.g_v, 97, 252):
                            raise lab2()
                        self.cursor += 1
                    except lab3:
                        pass
                    raise lab1()
                except lab2:
                    pass
                self.cursor = v_2
                # (, line 40
                if not self.out_grouping(SpanishStemmer.g_v, 97, 252):
                    raise lab0()
                # or, line 40
                try:
                    v_4 = self.cursor
                    try:
                        # (, line 40
                        if not self.out_grouping(SpanishStemmer.g_v, 97, 252):
                            raise lab6()
                        # gopast grouping v, line 40
                        if not self.go_out_grouping(SpanishStemmer.g_v, 97, 252):
                            raise lab6()
                        self.cursor += 1
                        raise lab5()
                    except lab6:
                        pass
                    self.cursor = v_4
                    # (, line 40
                    if not self.in_grouping(SpanishStemmer.g_v, 97, 252):
                        raise lab0()
                    # next, line 40
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                except lab5:
                    pass
            except lab1:
                pass
            # setmark pV, line 41
            self.I_pV = self.cursor
        except lab0:
            pass
        self.cursor = v_1
        # do, line 43
        v_5 = self.cursor
        try:
            # (, line 43
            # gopast grouping v, line 44
            if not self.go_out_grouping(SpanishStemmer.g_v, 97, 252):
                raise lab7()
            self.cursor += 1
            # gopast non v, line 44
            if not self.go_in_grouping(SpanishStemmer.g_v, 97, 252):
                raise lab7()
            self.cursor += 1
            # setmark p1, line 44
            self.I_p1 = self.cursor
            # gopast grouping v, line 45
            if not self.go_out_grouping(SpanishStemmer.g_v, 97, 252):
                raise lab7()
            self.cursor += 1
            # gopast non v, line 45
            if not self.go_in_grouping(SpanishStemmer.g_v, 97, 252):
                raise lab7()
            self.cursor += 1
            # setmark p2, line 45
            self.I_p2 = self.cursor
        except lab7:
            pass
        self.cursor = v_5
        return True

    def __r_postlude(self):
        # repeat, line 49
        while True:
            v_1 = self.cursor
            try:
                # (, line 49
                # [, line 50
                self.bra = self.cursor
                # substring, line 50
                among_var = self.find_among(SpanishStemmer.a_0)
                if among_var == 0:
                    raise lab0()
                # ], line 50
                self.ket = self.cursor
                if among_var == 1:
                    # (, line 51
                    # <-, line 51
                    if not self.slice_from("a"):
                        return False
                elif among_var == 2:
                    # (, line 52
                    # <-, line 52
                    if not self.slice_from("e"):
                        return False
                elif among_var == 3:
                    # (, line 53
                    # <-, line 53
                    if not self.slice_from("i"):
                        return False
                elif among_var == 4:
                    # (, line 54
                    # <-, line 54
                    if not self.slice_from("o"):
                        return False
                elif among_var == 5:
                    # (, line 55
                    # <-, line 55
                    if not self.slice_from("u"):
                        return False
                elif among_var == 6:
                    # (, line 57
                    # next, line 57
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                continue
            except lab0:
                pass
            self.cursor = v_1
            break
        return True

    def __r_RV(self):
        if not self.I_pV <= self.cursor:
            return False
        return True

    def __r_R1(self):
        if not self.I_p1 <= self.cursor:
            return False
        return True

    def __r_R2(self):
        if not self.I_p2 <= self.cursor:
            return False
        return True

    def __r_attached_pronoun(self):
        # (, line 67
        # [, line 68
        self.ket = self.cursor
        # substring, line 68
        if self.find_among_b(SpanishStemmer.a_1) == 0:
            return False
        # ], line 68
        self.bra = self.cursor
        # substring, line 72
        among_var = self.find_among_b(SpanishStemmer.a_2)
        if among_var == 0:
            return False
        # call RV, line 72
        if not self.__r_RV():
            return False
        if among_var == 1:
            # (, line 73
            # ], line 73
            self.bra = self.cursor
            # <-, line 73
            if not self.slice_from("iendo"):
                return False
        elif among_var == 2:
            # (, line 74
            # ], line 74
            self.bra = self.cursor
            # <-, line 74
            if not self.slice_from("ando"):
                return False
        elif among_var == 3:
            # (, line 75
            # ], line 75
            self.bra = self.cursor
            # <-, line 75
            if not self.slice_from("ar"):
                return False
        elif among_var == 4:
            # (, line 76
            # ], line 76
            self.bra = self.cursor
            # <-, line 76
            if not self.slice_from("er"):
                return False
        elif among_var == 5:
            # (, line 77
            # ], line 77
            self.bra = self.cursor
            # <-, line 77
            if not self.slice_from("ir"):
                return False
        elif among_var == 6:
            # (, line 81
            # delete, line 81
            if not self.slice_del():
                return False

        elif among_var == 7:
            # (, line 82
            # literal, line 82
            if not self.eq_s_b("u"):
                return False
            # delete, line 82
            if not self.slice_del():
                return False

        return True

    def __r_standard_suffix(self):
        # (, line 86
        # [, line 87
        self.ket = self.cursor
        # substring, line 87
        among_var = self.find_among_b(SpanishStemmer.a_6)
        if among_var == 0:
            return False
        # ], line 87
        self.bra = self.cursor
        if among_var == 1:
            # (, line 98
            # call R2, line 99
            if not self.__r_R2():
                return False
            # delete, line 99
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 104
            # call R2, line 105
            if not self.__r_R2():
                return False
            # delete, line 105
            if not self.slice_del():
                return False

            # try, line 106
            v_1 = self.limit - self.cursor
            try:
                # (, line 106
                # [, line 106
                self.ket = self.cursor
                # literal, line 106
                if not self.eq_s_b("ic"):
                    self.cursor = self.limit - v_1
                    raise lab0()
                # ], line 106
                self.bra = self.cursor
                # call R2, line 106
                if not self.__r_R2():
                    self.cursor = self.limit - v_1
                    raise lab0()
                # delete, line 106
                if not self.slice_del():
                    return False

            except lab0:
                pass
        elif among_var == 3:
            # (, line 110
            # call R2, line 111
            if not self.__r_R2():
                return False
            # <-, line 111
            if not self.slice_from("log"):
                return False
        elif among_var == 4:
            # (, line 114
            # call R2, line 115
            if not self.__r_R2():
                return False
            # <-, line 115
            if not self.slice_from("u"):
                return False
        elif among_var == 5:
            # (, line 118
            # call R2, line 119
            if not self.__r_R2():
                return False
            # <-, line 119
            if not self.slice_from("ente"):
                return False
        elif among_var == 6:
            # (, line 122
            # call R1, line 123
            if not self.__r_R1():
                return False
            # delete, line 123
            if not self.slice_del():
                return False

            # try, line 124
            v_2 = self.limit - self.cursor
            try:
                # (, line 124
                # [, line 125
                self.ket = self.cursor
                # substring, line 125
                among_var = self.find_among_b(SpanishStemmer.a_3)
                if among_var == 0:
                    self.cursor = self.limit - v_2
                    raise lab1()
                # ], line 125
                self.bra = self.cursor
                # call R2, line 125
                if not self.__r_R2():
                    self.cursor = self.limit - v_2
                    raise lab1()
                # delete, line 125
                if not self.slice_del():
                    return False

                if among_var == 1:
                    # (, line 126
                    # [, line 126
                    self.ket = self.cursor
                    # literal, line 126
                    if not self.eq_s_b("at"):
                        self.cursor = self.limit - v_2
                        raise lab1()
                    # ], line 126
                    self.bra = self.cursor
                    # call R2, line 126
                    if not self.__r_R2():
                        self.cursor = self.limit - v_2
                        raise lab1()
                    # delete, line 126
                    if not self.slice_del():
                        return False

            except lab1:
                pass
        elif among_var == 7:
            # (, line 134
            # call R2, line 135
            if not self.__r_R2():
                return False
            # delete, line 135
            if not self.slice_del():
                return False

            # try, line 136
            v_3 = self.limit - self.cursor
            try:
                # (, line 136
                # [, line 137
                self.ket = self.cursor
                # substring, line 137
                if self.find_among_b(SpanishStemmer.a_4) == 0:
                    self.cursor = self.limit - v_3
                    raise lab2()
                # ], line 137
                self.bra = self.cursor
                # (, line 140
                # call R2, line 140
                if not self.__r_R2():
                    self.cursor = self.limit - v_3
                    raise lab2()
                # delete, line 140
                if not self.slice_del():
                    return False

            except lab2:
                pass
        elif among_var == 8:
            # (, line 146
            # call R2, line 147
            if not self.__r_R2():
                return False
            # delete, line 147
            if not self.slice_del():
                return False

            # try, line 148
            v_4 = self.limit - self.cursor
            try:
                # (, line 148
                # [, line 149
                self.ket = self.cursor
                # substring, line 149
                if self.find_among_b(SpanishStemmer.a_5) == 0:
                    self.cursor = self.limit - v_4
                    raise lab3()
                # ], line 149
                self.bra = self.cursor
                # (, line 152
                # call R2, line 152
                if not self.__r_R2():
                    self.cursor = self.limit - v_4
                    raise lab3()
                # delete, line 152
                if not self.slice_del():
                    return False

            except lab3:
                pass
        elif among_var == 9:
            # (, line 158
            # call R2, line 159
            if not self.__r_R2():
                return False
            # delete, line 159
            if not self.slice_del():
                return False

            # try, line 160
            v_5 = self.limit - self.cursor
            try:
                # (, line 160
                # [, line 161
                self.ket = self.cursor
                # literal, line 161
                if not self.eq_s_b("at"):
                    self.cursor = self.limit - v_5
                    raise lab4()
                # ], line 161
                self.bra = self.cursor
                # call R2, line 161
                if not self.__r_R2():
                    self.cursor = self.limit - v_5
                    raise lab4()
                # delete, line 161
                if not self.slice_del():
                    return False

            except lab4:
                pass
        return True

    def __r_y_verb_suffix(self):
        # (, line 167
        # setlimit, line 168
        if self.cursor < self.I_pV:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_pV
        # (, line 168
        # [, line 168
        self.ket = self.cursor
        # substring, line 168
        if self.find_among_b(SpanishStemmer.a_7) == 0:
            self.limit_backward = v_2
            return False
        # ], line 168
        self.bra = self.cursor
        self.limit_backward = v_2
        # (, line 171
        # literal, line 171
        if not self.eq_s_b("u"):
            return False
        # delete, line 171
        if not self.slice_del():
            return False

        return True

    def __r_verb_suffix(self):
        # (, line 175
        # setlimit, line 176
        if self.cursor < self.I_pV:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_pV
        # (, line 176
        # [, line 176
        self.ket = self.cursor
        # substring, line 176
        among_var = self.find_among_b(SpanishStemmer.a_8)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        # ], line 176
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            # (, line 179
            # try, line 179
            v_3 = self.limit - self.cursor
            try:
                # (, line 179
                # literal, line 179
                if not self.eq_s_b("u"):
                    self.cursor = self.limit - v_3
                    raise lab0()
                # test, line 179
                v_4 = self.limit - self.cursor
                # literal, line 179
                if not self.eq_s_b("g"):
                    self.cursor = self.limit - v_3
                    raise lab0()
                self.cursor = self.limit - v_4
            except lab0:
                pass
            # ], line 179
            self.bra = self.cursor
            # delete, line 179
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 200
            # delete, line 200
            if not self.slice_del():
                return False

        return True

    def __r_residual_suffix(self):
        # (, line 204
        # [, line 205
        self.ket = self.cursor
        # substring, line 205
        among_var = self.find_among_b(SpanishStemmer.a_9)
        if among_var == 0:
            return False
        # ], line 205
        self.bra = self.cursor
        if among_var == 1:
            # (, line 208
            # call RV, line 208
            if not self.__r_RV():
                return False
            # delete, line 208
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 210
            # call RV, line 210
            if not self.__r_RV():
                return False
            # delete, line 210
            if not self.slice_del():
                return False

            # try, line 210
            v_1 = self.limit - self.cursor
            try:
                # (, line 210
                # [, line 210
                self.ket = self.cursor
                # literal, line 210
                if not self.eq_s_b("u"):
                    self.cursor = self.limit - v_1
                    raise lab0()
                # ], line 210
                self.bra = self.cursor
                # test, line 210
                v_2 = self.limit - self.cursor
                # literal, line 210
                if not self.eq_s_b("g"):
                    self.cursor = self.limit - v_1
                    raise lab0()
                self.cursor = self.limit - v_2
                # call RV, line 210
                if not self.__r_RV():
                    self.cursor = self.limit - v_1
                    raise lab0()
                # delete, line 210
                if not self.slice_del():
                    return False

            except lab0:
                pass
        return True

    def _stem(self):
        # (, line 215
        # do, line 216
        # call mark_regions, line 216
        self.__r_mark_regions()
        # backwards, line 217
        self.limit_backward = self.cursor
        self.cursor = self.limit
        # (, line 217
        # do, line 218
        v_2 = self.limit - self.cursor
        # call attached_pronoun, line 218
        self.__r_attached_pronoun()
        self.cursor = self.limit - v_2
        # do, line 219
        v_3 = self.limit - self.cursor
        try:
            # (, line 219
            # or, line 219
            try:
                v_4 = self.limit - self.cursor
                try:
                    # call standard_suffix, line 219
                    if not self.__r_standard_suffix():
                        raise lab2()
                    raise lab1()
                except lab2:
                    pass
                self.cursor = self.limit - v_4
                try:
                    # call y_verb_suffix, line 220
                    if not self.__r_y_verb_suffix():
                        raise lab3()
                    raise lab1()
                except lab3:
                    pass
                self.cursor = self.limit - v_4
                # call verb_suffix, line 221
                if not self.__r_verb_suffix():
                    raise lab0()
            except lab1:
                pass
        except lab0:
            pass
        self.cursor = self.limit - v_3
        # do, line 223
        v_5 = self.limit - self.cursor
        # call residual_suffix, line 223
        self.__r_residual_suffix()
        self.cursor = self.limit - v_5
        self.cursor = self.limit_backward
        # do, line 225
        v_6 = self.cursor
        # call postlude, line 225
        self.__r_postlude()
        self.cursor = v_6
        return True


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass


class lab6(BaseException):
    pass


class lab7(BaseException):
    pass
