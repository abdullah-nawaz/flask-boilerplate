# Generated by Snowball 2.0.0 - https://snowballstem.org/

from .basestemmer import BaseStemmer
from .among import Among


class ItalianStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.0.0 - https://snowballstem.org/
    """

    a_0 = [
        Among("", -1, 7),
        Among("qu", 0, 6),
        Among("\u00E1", 0, 1),
        Among("\u00E9", 0, 2),
        Among("\u00ED", 0, 3),
        Among("\u00F3", 0, 4),
        Among("\u00FA", 0, 5),
    ]

    a_1 = [Among("", -1, 3), Among("I", 0, 1), Among("U", 0, 2)]

    a_2 = [
        Among("la", -1, -1),
        Among("cela", 0, -1),
        Among("gliela", 0, -1),
        Among("mela", 0, -1),
        Among("tela", 0, -1),
        Among("vela", 0, -1),
        Among("le", -1, -1),
        Among("cele", 6, -1),
        Among("gliele", 6, -1),
        Among("mele", 6, -1),
        Among("tele", 6, -1),
        Among("vele", 6, -1),
        Among("ne", -1, -1),
        Among("cene", 12, -1),
        Among("gliene", 12, -1),
        Among("mene", 12, -1),
        Among("sene", 12, -1),
        Among("tene", 12, -1),
        Among("vene", 12, -1),
        Among("ci", -1, -1),
        Among("li", -1, -1),
        Among("celi", 20, -1),
        Among("glieli", 20, -1),
        Among("meli", 20, -1),
        Among("teli", 20, -1),
        Among("veli", 20, -1),
        Among("gli", 20, -1),
        Among("mi", -1, -1),
        Among("si", -1, -1),
        Among("ti", -1, -1),
        Among("vi", -1, -1),
        Among("lo", -1, -1),
        Among("celo", 31, -1),
        Among("glielo", 31, -1),
        Among("melo", 31, -1),
        Among("telo", 31, -1),
        Among("velo", 31, -1),
    ]

    a_3 = [
        Among("ando", -1, 1),
        Among("endo", -1, 1),
        Among("ar", -1, 2),
        Among("er", -1, 2),
        Among("ir", -1, 2),
    ]

    a_4 = [
        Among("ic", -1, -1),
        Among("abil", -1, -1),
        Among("os", -1, -1),
        Among("iv", -1, 1),
    ]

    a_5 = [Among("ic", -1, 1), Among("abil", -1, 1), Among("iv", -1, 1)]

    a_6 = [
        Among("ica", -1, 1),
        Among("logia", -1, 3),
        Among("osa", -1, 1),
        Among("ista", -1, 1),
        Among("iva", -1, 9),
        Among("anza", -1, 1),
        Among("enza", -1, 5),
        Among("ice", -1, 1),
        Among("atrice", 7, 1),
        Among("iche", -1, 1),
        Among("logie", -1, 3),
        Among("abile", -1, 1),
        Among("ibile", -1, 1),
        Among("usione", -1, 4),
        Among("azione", -1, 2),
        Among("uzione", -1, 4),
        Among("atore", -1, 2),
        Among("ose", -1, 1),
        Among("ante", -1, 1),
        Among("mente", -1, 1),
        Among("amente", 19, 7),
        Among("iste", -1, 1),
        Among("ive", -1, 9),
        Among("anze", -1, 1),
        Among("enze", -1, 5),
        Among("ici", -1, 1),
        Among("atrici", 25, 1),
        Among("ichi", -1, 1),
        Among("abili", -1, 1),
        Among("ibili", -1, 1),
        Among("ismi", -1, 1),
        Among("usioni", -1, 4),
        Among("azioni", -1, 2),
        Among("uzioni", -1, 4),
        Among("atori", -1, 2),
        Among("osi", -1, 1),
        Among("anti", -1, 1),
        Among("amenti", -1, 6),
        Among("imenti", -1, 6),
        Among("isti", -1, 1),
        Among("ivi", -1, 9),
        Among("ico", -1, 1),
        Among("ismo", -1, 1),
        Among("oso", -1, 1),
        Among("amento", -1, 6),
        Among("imento", -1, 6),
        Among("ivo", -1, 9),
        Among("it\u00E0", -1, 8),
        Among("ist\u00E0", -1, 1),
        Among("ist\u00E8", -1, 1),
        Among("ist\u00EC", -1, 1),
    ]

    a_7 = [
        Among("isca", -1, 1),
        Among("enda", -1, 1),
        Among("ata", -1, 1),
        Among("ita", -1, 1),
        Among("uta", -1, 1),
        Among("ava", -1, 1),
        Among("eva", -1, 1),
        Among("iva", -1, 1),
        Among("erebbe", -1, 1),
        Among("irebbe", -1, 1),
        Among("isce", -1, 1),
        Among("ende", -1, 1),
        Among("are", -1, 1),
        Among("ere", -1, 1),
        Among("ire", -1, 1),
        Among("asse", -1, 1),
        Among("ate", -1, 1),
        Among("avate", 16, 1),
        Among("evate", 16, 1),
        Among("ivate", 16, 1),
        Among("ete", -1, 1),
        Among("erete", 20, 1),
        Among("irete", 20, 1),
        Among("ite", -1, 1),
        Among("ereste", -1, 1),
        Among("ireste", -1, 1),
        Among("ute", -1, 1),
        Among("erai", -1, 1),
        Among("irai", -1, 1),
        Among("isci", -1, 1),
        Among("endi", -1, 1),
        Among("erei", -1, 1),
        Among("irei", -1, 1),
        Among("assi", -1, 1),
        Among("ati", -1, 1),
        Among("iti", -1, 1),
        Among("eresti", -1, 1),
        Among("iresti", -1, 1),
        Among("uti", -1, 1),
        Among("avi", -1, 1),
        Among("evi", -1, 1),
        Among("ivi", -1, 1),
        Among("isco", -1, 1),
        Among("ando", -1, 1),
        Among("endo", -1, 1),
        Among("Yamo", -1, 1),
        Among("iamo", -1, 1),
        Among("avamo", -1, 1),
        Among("evamo", -1, 1),
        Among("ivamo", -1, 1),
        Among("eremo", -1, 1),
        Among("iremo", -1, 1),
        Among("assimo", -1, 1),
        Among("ammo", -1, 1),
        Among("emmo", -1, 1),
        Among("eremmo", 54, 1),
        Among("iremmo", 54, 1),
        Among("immo", -1, 1),
        Among("ano", -1, 1),
        Among("iscano", 58, 1),
        Among("avano", 58, 1),
        Among("evano", 58, 1),
        Among("ivano", 58, 1),
        Among("eranno", -1, 1),
        Among("iranno", -1, 1),
        Among("ono", -1, 1),
        Among("iscono", 65, 1),
        Among("arono", 65, 1),
        Among("erono", 65, 1),
        Among("irono", 65, 1),
        Among("erebbero", -1, 1),
        Among("irebbero", -1, 1),
        Among("assero", -1, 1),
        Among("essero", -1, 1),
        Among("issero", -1, 1),
        Among("ato", -1, 1),
        Among("ito", -1, 1),
        Among("uto", -1, 1),
        Among("avo", -1, 1),
        Among("evo", -1, 1),
        Among("ivo", -1, 1),
        Among("ar", -1, 1),
        Among("ir", -1, 1),
        Among("er\u00E0", -1, 1),
        Among("ir\u00E0", -1, 1),
        Among("er\u00F2", -1, 1),
        Among("ir\u00F2", -1, 1),
    ]

    g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2, 1]

    g_AEIO = [17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2]

    g_CG = [17]

    I_p2 = 0
    I_p1 = 0
    I_pV = 0

    def __r_prelude(self):
        # (, line 34
        # test, line 35
        v_1 = self.cursor
        # repeat, line 35
        while True:
            v_2 = self.cursor
            try:
                # (, line 35
                # [, line 36
                self.bra = self.cursor
                # substring, line 36
                among_var = self.find_among(ItalianStemmer.a_0)
                if among_var == 0:
                    raise lab0()
                # ], line 36
                self.ket = self.cursor
                if among_var == 1:
                    # (, line 37
                    # <-, line 37
                    if not self.slice_from("\u00E0"):
                        return False
                elif among_var == 2:
                    # (, line 38
                    # <-, line 38
                    if not self.slice_from("\u00E8"):
                        return False
                elif among_var == 3:
                    # (, line 39
                    # <-, line 39
                    if not self.slice_from("\u00EC"):
                        return False
                elif among_var == 4:
                    # (, line 40
                    # <-, line 40
                    if not self.slice_from("\u00F2"):
                        return False
                elif among_var == 5:
                    # (, line 41
                    # <-, line 41
                    if not self.slice_from("\u00F9"):
                        return False
                elif among_var == 6:
                    # (, line 42
                    # <-, line 42
                    if not self.slice_from("qU"):
                        return False
                elif among_var == 7:
                    # (, line 43
                    # next, line 43
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                continue
            except lab0:
                pass
            self.cursor = v_2
            break
        self.cursor = v_1
        # repeat, line 46
        while True:
            v_3 = self.cursor
            try:
                # goto, line 46
                try:
                    while True:
                        v_4 = self.cursor
                        try:
                            # (, line 46
                            if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                                raise lab3()
                            # [, line 47
                            self.bra = self.cursor
                            # or, line 47
                            try:
                                v_5 = self.cursor
                                try:
                                    # (, line 47
                                    # literal, line 47
                                    if not self.eq_s("u"):
                                        raise lab5()
                                    # ], line 47
                                    self.ket = self.cursor
                                    if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                                        raise lab5()
                                    # <-, line 47
                                    if not self.slice_from("U"):
                                        return False
                                    raise lab4()
                                except lab5:
                                    pass
                                self.cursor = v_5
                                # (, line 48
                                # literal, line 48
                                if not self.eq_s("i"):
                                    raise lab3()
                                # ], line 48
                                self.ket = self.cursor
                                if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                                    raise lab3()
                                # <-, line 48
                                if not self.slice_from("I"):
                                    return False
                            except lab4:
                                pass
                            self.cursor = v_4
                            raise lab2()
                        except lab3:
                            pass
                        self.cursor = v_4
                        if self.cursor >= self.limit:
                            raise lab1()
                        self.cursor += 1
                except lab2:
                    pass
                continue
            except lab1:
                pass
            self.cursor = v_3
            break
        return True

    def __r_mark_regions(self):
        # (, line 52
        self.I_pV = self.limit
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        # do, line 58
        v_1 = self.cursor
        try:
            # (, line 58
            # or, line 60
            try:
                v_2 = self.cursor
                try:
                    # (, line 59
                    if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                        raise lab2()
                    # or, line 59
                    try:
                        v_3 = self.cursor
                        try:
                            # (, line 59
                            if not self.out_grouping(ItalianStemmer.g_v, 97, 249):
                                raise lab4()
                            # gopast grouping v, line 59
                            if not self.go_out_grouping(ItalianStemmer.g_v, 97, 249):
                                raise lab4()
                            self.cursor += 1
                            raise lab3()
                        except lab4:
                            pass
                        self.cursor = v_3
                        # (, line 59
                        if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                            raise lab2()
                        # gopast non v, line 59
                        if not self.go_in_grouping(ItalianStemmer.g_v, 97, 249):
                            raise lab2()
                        self.cursor += 1
                    except lab3:
                        pass
                    raise lab1()
                except lab2:
                    pass
                self.cursor = v_2
                # (, line 61
                if not self.out_grouping(ItalianStemmer.g_v, 97, 249):
                    raise lab0()
                # or, line 61
                try:
                    v_4 = self.cursor
                    try:
                        # (, line 61
                        if not self.out_grouping(ItalianStemmer.g_v, 97, 249):
                            raise lab6()
                        # gopast grouping v, line 61
                        if not self.go_out_grouping(ItalianStemmer.g_v, 97, 249):
                            raise lab6()
                        self.cursor += 1
                        raise lab5()
                    except lab6:
                        pass
                    self.cursor = v_4
                    # (, line 61
                    if not self.in_grouping(ItalianStemmer.g_v, 97, 249):
                        raise lab0()
                    # next, line 61
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                except lab5:
                    pass
            except lab1:
                pass
            # setmark pV, line 62
            self.I_pV = self.cursor
        except lab0:
            pass
        self.cursor = v_1
        # do, line 64
        v_5 = self.cursor
        try:
            # (, line 64
            # gopast grouping v, line 65
            if not self.go_out_grouping(ItalianStemmer.g_v, 97, 249):
                raise lab7()
            self.cursor += 1
            # gopast non v, line 65
            if not self.go_in_grouping(ItalianStemmer.g_v, 97, 249):
                raise lab7()
            self.cursor += 1
            # setmark p1, line 65
            self.I_p1 = self.cursor
            # gopast grouping v, line 66
            if not self.go_out_grouping(ItalianStemmer.g_v, 97, 249):
                raise lab7()
            self.cursor += 1
            # gopast non v, line 66
            if not self.go_in_grouping(ItalianStemmer.g_v, 97, 249):
                raise lab7()
            self.cursor += 1
            # setmark p2, line 66
            self.I_p2 = self.cursor
        except lab7:
            pass
        self.cursor = v_5
        return True

    def __r_postlude(self):
        # repeat, line 70
        while True:
            v_1 = self.cursor
            try:
                # (, line 70
                # [, line 72
                self.bra = self.cursor
                # substring, line 72
                among_var = self.find_among(ItalianStemmer.a_1)
                if among_var == 0:
                    raise lab0()
                # ], line 72
                self.ket = self.cursor
                if among_var == 1:
                    # (, line 73
                    # <-, line 73
                    if not self.slice_from("i"):
                        return False
                elif among_var == 2:
                    # (, line 74
                    # <-, line 74
                    if not self.slice_from("u"):
                        return False
                elif among_var == 3:
                    # (, line 75
                    # next, line 75
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                continue
            except lab0:
                pass
            self.cursor = v_1
            break
        return True

    def __r_RV(self):
        if not self.I_pV <= self.cursor:
            return False
        return True

    def __r_R1(self):
        if not self.I_p1 <= self.cursor:
            return False
        return True

    def __r_R2(self):
        if not self.I_p2 <= self.cursor:
            return False
        return True

    def __r_attached_pronoun(self):
        # (, line 86
        # [, line 87
        self.ket = self.cursor
        # substring, line 87
        if self.find_among_b(ItalianStemmer.a_2) == 0:
            return False
        # ], line 87
        self.bra = self.cursor
        # among, line 97
        among_var = self.find_among_b(ItalianStemmer.a_3)
        if among_var == 0:
            return False
        # (, line 97
        # call RV, line 97
        if not self.__r_RV():
            return False
        if among_var == 1:
            # (, line 98
            # delete, line 98
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 99
            # <-, line 99
            if not self.slice_from("e"):
                return False
        return True

    def __r_standard_suffix(self):
        # (, line 103
        # [, line 104
        self.ket = self.cursor
        # substring, line 104
        among_var = self.find_among_b(ItalianStemmer.a_6)
        if among_var == 0:
            return False
        # ], line 104
        self.bra = self.cursor
        if among_var == 1:
            # (, line 111
            # call R2, line 111
            if not self.__r_R2():
                return False
            # delete, line 111
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 113
            # call R2, line 113
            if not self.__r_R2():
                return False
            # delete, line 113
            if not self.slice_del():
                return False

            # try, line 114
            v_1 = self.limit - self.cursor
            try:
                # (, line 114
                # [, line 114
                self.ket = self.cursor
                # literal, line 114
                if not self.eq_s_b("ic"):
                    self.cursor = self.limit - v_1
                    raise lab0()
                # ], line 114
                self.bra = self.cursor
                # call R2, line 114
                if not self.__r_R2():
                    self.cursor = self.limit - v_1
                    raise lab0()
                # delete, line 114
                if not self.slice_del():
                    return False

            except lab0:
                pass
        elif among_var == 3:
            # (, line 117
            # call R2, line 117
            if not self.__r_R2():
                return False
            # <-, line 117
            if not self.slice_from("log"):
                return False
        elif among_var == 4:
            # (, line 119
            # call R2, line 119
            if not self.__r_R2():
                return False
            # <-, line 119
            if not self.slice_from("u"):
                return False
        elif among_var == 5:
            # (, line 121
            # call R2, line 121
            if not self.__r_R2():
                return False
            # <-, line 121
            if not self.slice_from("ente"):
                return False
        elif among_var == 6:
            # (, line 123
            # call RV, line 123
            if not self.__r_RV():
                return False
            # delete, line 123
            if not self.slice_del():
                return False

        elif among_var == 7:
            # (, line 124
            # call R1, line 125
            if not self.__r_R1():
                return False
            # delete, line 125
            if not self.slice_del():
                return False

            # try, line 126
            v_2 = self.limit - self.cursor
            try:
                # (, line 126
                # [, line 127
                self.ket = self.cursor
                # substring, line 127
                among_var = self.find_among_b(ItalianStemmer.a_4)
                if among_var == 0:
                    self.cursor = self.limit - v_2
                    raise lab1()
                # ], line 127
                self.bra = self.cursor
                # call R2, line 127
                if not self.__r_R2():
                    self.cursor = self.limit - v_2
                    raise lab1()
                # delete, line 127
                if not self.slice_del():
                    return False

                if among_var == 1:
                    # (, line 128
                    # [, line 128
                    self.ket = self.cursor
                    # literal, line 128
                    if not self.eq_s_b("at"):
                        self.cursor = self.limit - v_2
                        raise lab1()
                    # ], line 128
                    self.bra = self.cursor
                    # call R2, line 128
                    if not self.__r_R2():
                        self.cursor = self.limit - v_2
                        raise lab1()
                    # delete, line 128
                    if not self.slice_del():
                        return False

            except lab1:
                pass
        elif among_var == 8:
            # (, line 133
            # call R2, line 134
            if not self.__r_R2():
                return False
            # delete, line 134
            if not self.slice_del():
                return False

            # try, line 135
            v_3 = self.limit - self.cursor
            try:
                # (, line 135
                # [, line 136
                self.ket = self.cursor
                # substring, line 136
                if self.find_among_b(ItalianStemmer.a_5) == 0:
                    self.cursor = self.limit - v_3
                    raise lab2()
                # ], line 136
                self.bra = self.cursor
                # (, line 137
                # call R2, line 137
                if not self.__r_R2():
                    self.cursor = self.limit - v_3
                    raise lab2()
                # delete, line 137
                if not self.slice_del():
                    return False

            except lab2:
                pass
        elif among_var == 9:
            # (, line 141
            # call R2, line 142
            if not self.__r_R2():
                return False
            # delete, line 142
            if not self.slice_del():
                return False

            # try, line 143
            v_4 = self.limit - self.cursor
            try:
                # (, line 143
                # [, line 143
                self.ket = self.cursor
                # literal, line 143
                if not self.eq_s_b("at"):
                    self.cursor = self.limit - v_4
                    raise lab3()
                # ], line 143
                self.bra = self.cursor
                # call R2, line 143
                if not self.__r_R2():
                    self.cursor = self.limit - v_4
                    raise lab3()
                # delete, line 143
                if not self.slice_del():
                    return False

                # [, line 143
                self.ket = self.cursor
                # literal, line 143
                if not self.eq_s_b("ic"):
                    self.cursor = self.limit - v_4
                    raise lab3()
                # ], line 143
                self.bra = self.cursor
                # call R2, line 143
                if not self.__r_R2():
                    self.cursor = self.limit - v_4
                    raise lab3()
                # delete, line 143
                if not self.slice_del():
                    return False

            except lab3:
                pass
        return True

    def __r_verb_suffix(self):
        # setlimit, line 148
        if self.cursor < self.I_pV:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_pV
        # (, line 148
        # [, line 149
        self.ket = self.cursor
        # substring, line 149
        if self.find_among_b(ItalianStemmer.a_7) == 0:
            self.limit_backward = v_2
            return False
        # ], line 149
        self.bra = self.cursor
        # (, line 163
        # delete, line 163
        if not self.slice_del():
            return False

        self.limit_backward = v_2
        return True

    def __r_vowel_suffix(self):
        # (, line 170
        # try, line 171
        v_1 = self.limit - self.cursor
        try:
            # (, line 171
            # [, line 172
            self.ket = self.cursor
            if not self.in_grouping_b(ItalianStemmer.g_AEIO, 97, 242):
                self.cursor = self.limit - v_1
                raise lab0()
            # ], line 172
            self.bra = self.cursor
            # call RV, line 172
            if not self.__r_RV():
                self.cursor = self.limit - v_1
                raise lab0()
            # delete, line 172
            if not self.slice_del():
                return False

            # [, line 173
            self.ket = self.cursor
            # literal, line 173
            if not self.eq_s_b("i"):
                self.cursor = self.limit - v_1
                raise lab0()
            # ], line 173
            self.bra = self.cursor
            # call RV, line 173
            if not self.__r_RV():
                self.cursor = self.limit - v_1
                raise lab0()
            # delete, line 173
            if not self.slice_del():
                return False

        except lab0:
            pass
        # try, line 175
        v_2 = self.limit - self.cursor
        try:
            # (, line 175
            # [, line 176
            self.ket = self.cursor
            # literal, line 176
            if not self.eq_s_b("h"):
                self.cursor = self.limit - v_2
                raise lab1()
            # ], line 176
            self.bra = self.cursor
            if not self.in_grouping_b(ItalianStemmer.g_CG, 99, 103):
                self.cursor = self.limit - v_2
                raise lab1()
            # call RV, line 176
            if not self.__r_RV():
                self.cursor = self.limit - v_2
                raise lab1()
            # delete, line 176
            if not self.slice_del():
                return False

        except lab1:
            pass
        return True

    def _stem(self):
        # (, line 181
        # do, line 182
        v_1 = self.cursor
        # call prelude, line 182
        self.__r_prelude()
        self.cursor = v_1
        # do, line 183
        # call mark_regions, line 183
        self.__r_mark_regions()
        # backwards, line 184
        self.limit_backward = self.cursor
        self.cursor = self.limit
        # (, line 184
        # do, line 185
        v_3 = self.limit - self.cursor
        # call attached_pronoun, line 185
        self.__r_attached_pronoun()
        self.cursor = self.limit - v_3
        # do, line 186
        v_4 = self.limit - self.cursor
        try:
            # (, line 186
            # or, line 186
            try:
                v_5 = self.limit - self.cursor
                try:
                    # call standard_suffix, line 186
                    if not self.__r_standard_suffix():
                        raise lab2()
                    raise lab1()
                except lab2:
                    pass
                self.cursor = self.limit - v_5
                # call verb_suffix, line 186
                if not self.__r_verb_suffix():
                    raise lab0()
            except lab1:
                pass
        except lab0:
            pass
        self.cursor = self.limit - v_4
        # do, line 187
        v_6 = self.limit - self.cursor
        # call vowel_suffix, line 187
        self.__r_vowel_suffix()
        self.cursor = self.limit - v_6
        self.cursor = self.limit_backward
        # do, line 189
        v_7 = self.cursor
        # call postlude, line 189
        self.__r_postlude()
        self.cursor = v_7
        return True


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass


class lab6(BaseException):
    pass


class lab7(BaseException):
    pass
